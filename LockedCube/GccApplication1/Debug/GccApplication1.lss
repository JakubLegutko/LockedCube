
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000408  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000394  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000408  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000438  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000cde  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000725  00000000  00000000  0000119e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000560  00000000  00000000  000018c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  00001e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004d0  00000000  00000000  00001eac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000036e  00000000  00000000  0000237c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000026ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a4 30       	cpi	r26, 0x04	; 4
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  88:	0c 94 c8 01 	jmp	0x390	; 0x390 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <shortbuzz>:
	
	}
			}

void shortbuzz(){
	PORTB ^= 0b00000100;
  90:	95 b1       	in	r25, 0x05	; 5
  92:	84 e0       	ldi	r24, 0x04	; 4
  94:	89 27       	eor	r24, r25
  96:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f ef       	ldi	r18, 0xFF	; 255
  9a:	81 ee       	ldi	r24, 0xE1	; 225
  9c:	94 e0       	ldi	r25, 0x04	; 4
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <shortbuzz+0xe>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <shortbuzz+0x18>
  a8:	00 00       	nop
	_delay_ms(100);
	PORTB &= 0b11111011;
  aa:	2a 98       	cbi	0x05, 2	; 5
  ac:	2f ef       	ldi	r18, 0xFF	; 255
  ae:	81 ee       	ldi	r24, 0xE1	; 225
  b0:	94 e0       	ldi	r25, 0x04	; 4
  b2:	21 50       	subi	r18, 0x01	; 1
  b4:	80 40       	sbci	r24, 0x00	; 0
  b6:	90 40       	sbci	r25, 0x00	; 0
  b8:	e1 f7       	brne	.-8      	; 0xb2 <shortbuzz+0x22>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <shortbuzz+0x2c>
  bc:	00 00       	nop
  be:	08 95       	ret

000000c0 <green_LED>:
	_delay_ms(100);
}
void green_LED(){
	PORTC &= 0b00001000;
  c0:	88 b1       	in	r24, 0x08	; 8
  c2:	88 70       	andi	r24, 0x08	; 8
  c4:	88 b9       	out	0x08, r24	; 8
  c6:	2f ef       	ldi	r18, 0xFF	; 255
  c8:	83 ed       	ldi	r24, 0xD3	; 211
  ca:	90 e3       	ldi	r25, 0x30	; 48
  cc:	21 50       	subi	r18, 0x01	; 1
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	90 40       	sbci	r25, 0x00	; 0
  d2:	e1 f7       	brne	.-8      	; 0xcc <green_LED+0xc>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <green_LED+0x16>
  d6:	00 00       	nop
	
	_delay_ms(1000);
	PORTC ^= 0b11110111;
  d8:	98 b1       	in	r25, 0x08	; 8
  da:	87 ef       	ldi	r24, 0xF7	; 247
  dc:	89 27       	eor	r24, r25
  de:	88 b9       	out	0x08, r24	; 8
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	83 ed       	ldi	r24, 0xD3	; 211
  e4:	90 e3       	ldi	r25, 0x30	; 48
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <green_LED+0x26>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <green_LED+0x30>
  f0:	00 00       	nop
  f2:	08 95       	ret

000000f4 <red_LED>:
		shortbuzz();
		red_LED();
	}
}
void red_LED(){
	PORTC &= 0b00000100;
  f4:	88 b1       	in	r24, 0x08	; 8
  f6:	84 70       	andi	r24, 0x04	; 4
  f8:	88 b9       	out	0x08, r24	; 8
  fa:	2f ef       	ldi	r18, 0xFF	; 255
  fc:	83 ed       	ldi	r24, 0xD3	; 211
  fe:	90 e3       	ldi	r25, 0x30	; 48
 100:	21 50       	subi	r18, 0x01	; 1
 102:	80 40       	sbci	r24, 0x00	; 0
 104:	90 40       	sbci	r25, 0x00	; 0
 106:	e1 f7       	brne	.-8      	; 0x100 <red_LED+0xc>
 108:	00 c0       	rjmp	.+0      	; 0x10a <red_LED+0x16>
 10a:	00 00       	nop
	
	_delay_ms(1000);
	PORTC ^= 0b11111011;
 10c:	98 b1       	in	r25, 0x08	; 8
 10e:	8b ef       	ldi	r24, 0xFB	; 251
 110:	89 27       	eor	r24, r25
 112:	88 b9       	out	0x08, r24	; 8
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	83 ed       	ldi	r24, 0xD3	; 211
 118:	90 e3       	ldi	r25, 0x30	; 48
 11a:	21 50       	subi	r18, 0x01	; 1
 11c:	80 40       	sbci	r24, 0x00	; 0
 11e:	90 40       	sbci	r25, 0x00	; 0
 120:	e1 f7       	brne	.-8      	; 0x11a <red_LED+0x26>
 122:	00 c0       	rjmp	.+0      	; 0x124 <red_LED+0x30>
 124:	00 00       	nop
 126:	08 95       	ret

00000128 <victory>:
	
	_delay_ms(1000);
	PORTC ^= 0b11110111;
	_delay_ms(1000);
}
void victory(int failure_counter) {
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	8c 01       	movw	r16, r24
	lastpos = 0;
 132:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 136:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	green_LED();
 13a:	0e 94 60 00 	call	0xc0	; 0xc0 <green_LED>
	shortbuzz();
 13e:	0e 94 48 00 	call	0x90	; 0x90 <shortbuzz>
 142:	2f ef       	ldi	r18, 0xFF	; 255
 144:	83 e2       	ldi	r24, 0x23	; 35
 146:	94 ef       	ldi	r25, 0xF4	; 244
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	80 40       	sbci	r24, 0x00	; 0
 14c:	90 40       	sbci	r25, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <victory+0x20>
 150:	00 c0       	rjmp	.+0      	; 0x152 <victory+0x2a>
 152:	00 00       	nop
	_delay_ms(5000);
	for(int i = 1;i < (failure_counter +1) ; i++) {
 154:	0f 5f       	subi	r16, 0xFF	; 255
 156:	1f 4f       	sbci	r17, 0xFF	; 255
 158:	02 30       	cpi	r16, 0x02	; 2
 15a:	11 05       	cpc	r17, r1
 15c:	54 f0       	brlt	.+20     	; 0x172 <victory+0x4a>
 15e:	c1 e0       	ldi	r28, 0x01	; 1
 160:	d0 e0       	ldi	r29, 0x00	; 0
		shortbuzz();
 162:	0e 94 48 00 	call	0x90	; 0x90 <shortbuzz>
		red_LED();
 166:	0e 94 7a 00 	call	0xf4	; 0xf4 <red_LED>
void victory(int failure_counter) {
	lastpos = 0;
	green_LED();
	shortbuzz();
	_delay_ms(5000);
	for(int i = 1;i < (failure_counter +1) ; i++) {
 16a:	21 96       	adiw	r28, 0x01	; 1
 16c:	c0 17       	cp	r28, r16
 16e:	d1 07       	cpc	r29, r17
 170:	c4 f3       	brlt	.-16     	; 0x162 <victory+0x3a>
 172:	2f ef       	ldi	r18, 0xFF	; 255
 174:	83 ed       	ldi	r24, 0xD3	; 211
 176:	90 e3       	ldi	r25, 0x30	; 48
 178:	21 50       	subi	r18, 0x01	; 1
 17a:	80 40       	sbci	r24, 0x00	; 0
 17c:	90 40       	sbci	r25, 0x00	; 0
 17e:	e1 f7       	brne	.-8      	; 0x178 <victory+0x50>
 180:	00 c0       	rjmp	.+0      	; 0x182 <victory+0x5a>
 182:	00 00       	nop
		shortbuzz();
		red_LED();
	}
	_delay_ms(1000);
	failure_counter = 0;
}
 184:	df 91       	pop	r29
 186:	cf 91       	pop	r28
 188:	1f 91       	pop	r17
 18a:	0f 91       	pop	r16
 18c:	08 95       	ret

0000018e <fail>:



void fail() {
	lastpos = 0;
 18e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 192:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	failure_counter++;
 196:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <failure_counter>
 19a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <failure_counter+0x1>
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <failure_counter+0x1>
 1a4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <failure_counter>
	for (int i =0; i < 3 ;i++) {
		shortbuzz();
 1a8:	0e 94 48 00 	call	0x90	; 0x90 <shortbuzz>
		red_LED();
 1ac:	0e 94 7a 00 	call	0xf4	; 0xf4 <red_LED>

void fail() {
	lastpos = 0;
	failure_counter++;
	for (int i =0; i < 3 ;i++) {
		shortbuzz();
 1b0:	0e 94 48 00 	call	0x90	; 0x90 <shortbuzz>
		red_LED();
 1b4:	0e 94 7a 00 	call	0xf4	; 0xf4 <red_LED>

void fail() {
	lastpos = 0;
	failure_counter++;
	for (int i =0; i < 3 ;i++) {
		shortbuzz();
 1b8:	0e 94 48 00 	call	0x90	; 0x90 <shortbuzz>
		red_LED();
 1bc:	0e 94 7a 00 	call	0xf4	; 0xf4 <red_LED>
 1c0:	08 95       	ret

000001c2 <main>:
int lastpos = 0;


int main()
{
    DDRD = 0b00000000;
 1c2:	1a b8       	out	0x0a, r1	; 10
	PORTD ^= 0b11111100;
 1c4:	9b b1       	in	r25, 0x0b	; 11
 1c6:	8c ef       	ldi	r24, 0xFC	; 252
 1c8:	89 27       	eor	r24, r25
 1ca:	8b b9       	out	0x0b, r24	; 11
	
	DDRB = 0b00111100;
 1cc:	8c e3       	ldi	r24, 0x3C	; 60
 1ce:	84 b9       	out	0x04, r24	; 4
	PORTB ^= 0b00000011;		// Declaring In's and Out's
 1d0:	95 b1       	in	r25, 0x05	; 5
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	89 27       	eor	r24, r25
 1d6:	85 b9       	out	0x05, r24	; 5
	
	DDRC = 0b00001110;
 1d8:	8e e0       	ldi	r24, 0x0E	; 14
 1da:	87 b9       	out	0x07, r24	; 7
	PORTC ^= 0b00011110;						// Pulling up by inside resistors
 1dc:	98 b1       	in	r25, 0x08	; 8
 1de:	8e e1       	ldi	r24, 0x1E	; 30
 1e0:	89 27       	eor	r24, r25
 1e2:	88 b9       	out	0x08, r24	; 8
			} else {
				fail();
				break;
			}
		} else if ((bit_is_clear(PINC, 4)) && (lastpos == 5)) {
			if(((PIND & position_D_mask) == (position_six_D & position_D_mask)) && ((PINB & position_B_mask) == (position_six_B & position_B_mask))) {
 1e4:	0f 2e       	mov	r0, r31
 1e6:	f0 e9       	ldi	r31, 0x90	; 144
 1e8:	3f 2e       	mov	r3, r31
 1ea:	f0 2d       	mov	r31, r0
 1ec:	d1 e0       	ldi	r29, 0x01	; 1
			fail();
			break;
		}
		
		} else if ((bit_is_clear(PINC, 4)) && (lastpos == 4)) {
			if(((PIND & position_D_mask) == (position_five_D & position_D_mask)) && ((PINB & position_B_mask) == (position_five_B & position_B_mask))) {
 1ee:	0f 2e       	mov	r0, r31
 1f0:	f4 e6       	ldi	r31, 0x64	; 100
 1f2:	4f 2e       	mov	r4, r31
 1f4:	f0 2d       	mov	r31, r0
 1f6:	c2 e0       	ldi	r28, 0x02	; 2
				lastpos = 5;
 1f8:	0f 2e       	mov	r0, r31
 1fa:	f5 e0       	ldi	r31, 0x05	; 5
 1fc:	8f 2e       	mov	r8, r31
 1fe:	91 2c       	mov	r9, r1
 200:	f0 2d       	mov	r31, r0
		} else {
			fail();
			break;
		}
	} else if ((bit_is_clear(PINC, 4)) && (lastpos == 3)) {
		if(((PIND & position_D_mask) == (position_four_D & position_D_mask)) && ((PINB & position_B_mask) == (position_four_B & position_B_mask))) {
 202:	0f 2e       	mov	r0, r31
 204:	f0 e5       	ldi	r31, 0x50	; 80
 206:	5f 2e       	mov	r5, r31
 208:	f0 2d       	mov	r31, r0
			lastpos = 4;
 20a:	68 94       	set
 20c:	aa 24       	eor	r10, r10
 20e:	a2 f8       	bld	r10, 2
 210:	b1 2c       	mov	r11, r1
				fail();
				break;
			}
	
	} else if ((bit_is_clear(PINC, 4)) && (lastpos == 2)) {
		if(((PIND & position_D_mask) == (position_three_D & position_D_mask)) && ((PINB & position_B_mask) == (position_three_B & position_B_mask))) {
 212:	0f 2e       	mov	r0, r31
 214:	f4 ea       	ldi	r31, 0xA4	; 164
 216:	6f 2e       	mov	r6, r31
 218:	f0 2d       	mov	r31, r0
			lastpos = 3;
 21a:	0f 2e       	mov	r0, r31
 21c:	f3 e0       	ldi	r31, 0x03	; 3
 21e:	cf 2e       	mov	r12, r31
 220:	d1 2c       	mov	r13, r1
 222:	f0 2d       	mov	r31, r0
				fail();
				break;
			}
			
	} else if ((bit_is_clear(PINC, 4)) && (lastpos == 1)) { 
		if(((PIND & position_D_mask) == (position_two_D & position_D_mask)) && ((PINB & position_B_mask) == (position_two_B & position_B_mask))) {
 224:	0f 2e       	mov	r0, r31
 226:	f8 e6       	ldi	r31, 0x68	; 104
 228:	7f 2e       	mov	r7, r31
 22a:	f0 2d       	mov	r31, r0
			lastpos = 2;
 22c:	68 94       	set
 22e:	ee 24       	eor	r14, r14
 230:	e1 f8       	bld	r14, 1
 232:	f1 2c       	mov	r15, r1
		//Turn on red LED turn off other LED's
		
		_delay_ms(3000);
	if((bit_is_clear(PINC, 4)) && (lastpos == 0)) {
		if (((PIND & position_D_mask) == (position_one_D & position_D_mask)) && ((PINB & position_B_mask) == (position_one_B & position_B_mask))) {
			lastpos = 1;
 234:	01 e0       	ldi	r16, 0x01	; 1
 236:	10 e0       	ldi	r17, 0x00	; 0
 238:	2f ef       	ldi	r18, 0xFF	; 255
 23a:	8b e7       	ldi	r24, 0x7B	; 123
 23c:	92 e9       	ldi	r25, 0x92	; 146
 23e:	21 50       	subi	r18, 0x01	; 1
 240:	80 40       	sbci	r24, 0x00	; 0
 242:	90 40       	sbci	r25, 0x00	; 0
 244:	e1 f7       	brne	.-8      	; 0x23e <main+0x7c>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x86>
 248:	00 00       	nop
		
		while(1){
		//Turn on red LED turn off other LED's
		
		_delay_ms(3000);
	if((bit_is_clear(PINC, 4)) && (lastpos == 0)) {
 24a:	34 99       	sbic	0x06, 4	; 6
 24c:	18 c0       	rjmp	.+48     	; 0x27e <main+0xbc>
 24e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 252:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 256:	89 2b       	or	r24, r25
 258:	91 f4       	brne	.+36     	; 0x27e <main+0xbc>
		if (((PIND & position_D_mask) == (position_one_D & position_D_mask)) && ((PINB & position_B_mask) == (position_one_B & position_B_mask))) {
 25a:	89 b1       	in	r24, 0x09	; 9
 25c:	8c 7f       	andi	r24, 0xFC	; 252
 25e:	84 39       	cpi	r24, 0x94	; 148
 260:	59 f4       	brne	.+22     	; 0x278 <main+0xb6>
 262:	83 b1       	in	r24, 0x03	; 3
 264:	83 70       	andi	r24, 0x03	; 3
 266:	8c 13       	cpse	r24, r28
 268:	07 c0       	rjmp	.+14     	; 0x278 <main+0xb6>
			lastpos = 1;
 26a:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <_edata+0x1>
 26e:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <_edata>
			shortbuzz();
 272:	0e 94 48 00 	call	0x90	; 0x90 <shortbuzz>
		while(1){
		//Turn on red LED turn off other LED's
		
		_delay_ms(3000);
	if((bit_is_clear(PINC, 4)) && (lastpos == 0)) {
		if (((PIND & position_D_mask) == (position_one_D & position_D_mask)) && ((PINB & position_B_mask) == (position_one_B & position_B_mask))) {
 276:	e0 cf       	rjmp	.-64     	; 0x238 <main+0x76>
			lastpos = 1;
			shortbuzz();
			
			} else {
				fail();
 278:	0e 94 c7 00 	call	0x18e	; 0x18e <fail>
				break;
 27c:	dd cf       	rjmp	.-70     	; 0x238 <main+0x76>
			}
			
	} else if ((bit_is_clear(PINC, 4)) && (lastpos == 1)) { 
 27e:	34 99       	sbic	0x06, 4	; 6
 280:	18 c0       	rjmp	.+48     	; 0x2b2 <main+0xf0>
 282:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 286:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 28a:	01 97       	sbiw	r24, 0x01	; 1
 28c:	91 f4       	brne	.+36     	; 0x2b2 <main+0xf0>
		if(((PIND & position_D_mask) == (position_two_D & position_D_mask)) && ((PINB & position_B_mask) == (position_two_B & position_B_mask))) {
 28e:	89 b1       	in	r24, 0x09	; 9
 290:	8c 7f       	andi	r24, 0xFC	; 252
 292:	87 11       	cpse	r24, r7
 294:	0b c0       	rjmp	.+22     	; 0x2ac <main+0xea>
 296:	83 b1       	in	r24, 0x03	; 3
 298:	83 70       	andi	r24, 0x03	; 3
 29a:	8d 13       	cpse	r24, r29
 29c:	07 c0       	rjmp	.+14     	; 0x2ac <main+0xea>
			lastpos = 2;
 29e:	f0 92 01 01 	sts	0x0101, r15	; 0x800101 <_edata+0x1>
 2a2:	e0 92 00 01 	sts	0x0100, r14	; 0x800100 <_edata>
			shortbuzz();
 2a6:	0e 94 48 00 	call	0x90	; 0x90 <shortbuzz>
				fail();
				break;
			}
			
	} else if ((bit_is_clear(PINC, 4)) && (lastpos == 1)) { 
		if(((PIND & position_D_mask) == (position_two_D & position_D_mask)) && ((PINB & position_B_mask) == (position_two_B & position_B_mask))) {
 2aa:	c6 cf       	rjmp	.-116    	; 0x238 <main+0x76>
			lastpos = 2;
			shortbuzz();
			} else {
				fail();
 2ac:	0e 94 c7 00 	call	0x18e	; 0x18e <fail>
				break;
 2b0:	c3 cf       	rjmp	.-122    	; 0x238 <main+0x76>
			}
	
	} else if ((bit_is_clear(PINC, 4)) && (lastpos == 2)) {
 2b2:	34 99       	sbic	0x06, 4	; 6
 2b4:	18 c0       	rjmp	.+48     	; 0x2e6 <main+0x124>
 2b6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2ba:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2be:	02 97       	sbiw	r24, 0x02	; 2
 2c0:	91 f4       	brne	.+36     	; 0x2e6 <main+0x124>
		if(((PIND & position_D_mask) == (position_three_D & position_D_mask)) && ((PINB & position_B_mask) == (position_three_B & position_B_mask))) {
 2c2:	89 b1       	in	r24, 0x09	; 9
 2c4:	8c 7f       	andi	r24, 0xFC	; 252
 2c6:	86 11       	cpse	r24, r6
 2c8:	0b c0       	rjmp	.+22     	; 0x2e0 <main+0x11e>
 2ca:	83 b1       	in	r24, 0x03	; 3
 2cc:	83 70       	andi	r24, 0x03	; 3
 2ce:	8d 13       	cpse	r24, r29
 2d0:	07 c0       	rjmp	.+14     	; 0x2e0 <main+0x11e>
			lastpos = 3;
 2d2:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <_edata+0x1>
 2d6:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <_edata>
			shortbuzz();
 2da:	0e 94 48 00 	call	0x90	; 0x90 <shortbuzz>
				fail();
				break;
			}
	
	} else if ((bit_is_clear(PINC, 4)) && (lastpos == 2)) {
		if(((PIND & position_D_mask) == (position_three_D & position_D_mask)) && ((PINB & position_B_mask) == (position_three_B & position_B_mask))) {
 2de:	ac cf       	rjmp	.-168    	; 0x238 <main+0x76>
			lastpos = 3;
			shortbuzz();
		} else {
			fail();
 2e0:	0e 94 c7 00 	call	0x18e	; 0x18e <fail>
			break;
 2e4:	a9 cf       	rjmp	.-174    	; 0x238 <main+0x76>
		}
	} else if ((bit_is_clear(PINC, 4)) && (lastpos == 3)) {
 2e6:	34 99       	sbic	0x06, 4	; 6
 2e8:	18 c0       	rjmp	.+48     	; 0x31a <main+0x158>
 2ea:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2ee:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 2f2:	03 97       	sbiw	r24, 0x03	; 3
 2f4:	91 f4       	brne	.+36     	; 0x31a <main+0x158>
		if(((PIND & position_D_mask) == (position_four_D & position_D_mask)) && ((PINB & position_B_mask) == (position_four_B & position_B_mask))) {
 2f6:	89 b1       	in	r24, 0x09	; 9
 2f8:	8c 7f       	andi	r24, 0xFC	; 252
 2fa:	85 11       	cpse	r24, r5
 2fc:	0b c0       	rjmp	.+22     	; 0x314 <main+0x152>
 2fe:	83 b1       	in	r24, 0x03	; 3
 300:	83 70       	andi	r24, 0x03	; 3
 302:	8c 13       	cpse	r24, r28
 304:	07 c0       	rjmp	.+14     	; 0x314 <main+0x152>
			lastpos = 4;
 306:	b0 92 01 01 	sts	0x0101, r11	; 0x800101 <_edata+0x1>
 30a:	a0 92 00 01 	sts	0x0100, r10	; 0x800100 <_edata>
			shortbuzz();
 30e:	0e 94 48 00 	call	0x90	; 0x90 <shortbuzz>
		} else {
			fail();
			break;
		}
	} else if ((bit_is_clear(PINC, 4)) && (lastpos == 3)) {
		if(((PIND & position_D_mask) == (position_four_D & position_D_mask)) && ((PINB & position_B_mask) == (position_four_B & position_B_mask))) {
 312:	92 cf       	rjmp	.-220    	; 0x238 <main+0x76>
			lastpos = 4;
			shortbuzz();
		} else {
			fail();
 314:	0e 94 c7 00 	call	0x18e	; 0x18e <fail>
			break;
 318:	8f cf       	rjmp	.-226    	; 0x238 <main+0x76>
		}
		
		} else if ((bit_is_clear(PINC, 4)) && (lastpos == 4)) {
 31a:	34 99       	sbic	0x06, 4	; 6
 31c:	18 c0       	rjmp	.+48     	; 0x34e <main+0x18c>
 31e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 322:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 326:	04 97       	sbiw	r24, 0x04	; 4
 328:	91 f4       	brne	.+36     	; 0x34e <main+0x18c>
			if(((PIND & position_D_mask) == (position_five_D & position_D_mask)) && ((PINB & position_B_mask) == (position_five_B & position_B_mask))) {
 32a:	89 b1       	in	r24, 0x09	; 9
 32c:	8c 7f       	andi	r24, 0xFC	; 252
 32e:	84 11       	cpse	r24, r4
 330:	0b c0       	rjmp	.+22     	; 0x348 <main+0x186>
 332:	83 b1       	in	r24, 0x03	; 3
 334:	83 70       	andi	r24, 0x03	; 3
 336:	8c 13       	cpse	r24, r28
 338:	07 c0       	rjmp	.+14     	; 0x348 <main+0x186>
				lastpos = 5;
 33a:	90 92 01 01 	sts	0x0101, r9	; 0x800101 <_edata+0x1>
 33e:	80 92 00 01 	sts	0x0100, r8	; 0x800100 <_edata>
				shortbuzz();
 342:	0e 94 48 00 	call	0x90	; 0x90 <shortbuzz>
			fail();
			break;
		}
		
		} else if ((bit_is_clear(PINC, 4)) && (lastpos == 4)) {
			if(((PIND & position_D_mask) == (position_five_D & position_D_mask)) && ((PINB & position_B_mask) == (position_five_B & position_B_mask))) {
 346:	78 cf       	rjmp	.-272    	; 0x238 <main+0x76>
				lastpos = 5;
				shortbuzz();
			} else {
				fail();
 348:	0e 94 c7 00 	call	0x18e	; 0x18e <fail>
				break;
 34c:	75 cf       	rjmp	.-278    	; 0x238 <main+0x76>
			}
		} else if ((bit_is_clear(PINC, 4)) && (lastpos == 5)) {
 34e:	34 99       	sbic	0x06, 4	; 6
 350:	73 cf       	rjmp	.-282    	; 0x238 <main+0x76>
 352:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 356:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 35a:	05 97       	sbiw	r24, 0x05	; 5
 35c:	09 f0       	breq	.+2      	; 0x360 <main+0x19e>
 35e:	6c cf       	rjmp	.-296    	; 0x238 <main+0x76>
			if(((PIND & position_D_mask) == (position_six_D & position_D_mask)) && ((PINB & position_B_mask) == (position_six_B & position_B_mask))) {
 360:	89 b1       	in	r24, 0x09	; 9
 362:	8c 7f       	andi	r24, 0xFC	; 252
 364:	83 11       	cpse	r24, r3
 366:	11 c0       	rjmp	.+34     	; 0x38a <main+0x1c8>
 368:	83 b1       	in	r24, 0x03	; 3
 36a:	83 70       	andi	r24, 0x03	; 3
 36c:	8d 13       	cpse	r24, r29
 36e:	0d c0       	rjmp	.+26     	; 0x38a <main+0x1c8>
				lastpos = 6;
 370:	86 e0       	ldi	r24, 0x06	; 6
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 378:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
				victory(failure_counter);
 37c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <failure_counter>
 380:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <failure_counter+0x1>
 384:	0e 94 94 00 	call	0x128	; 0x128 <victory>
			} else {
				fail();
				break;
			}
		} else if ((bit_is_clear(PINC, 4)) && (lastpos == 5)) {
			if(((PIND & position_D_mask) == (position_six_D & position_D_mask)) && ((PINB & position_B_mask) == (position_six_B & position_B_mask))) {
 388:	57 cf       	rjmp	.-338    	; 0x238 <main+0x76>
				lastpos = 6;
				victory(failure_counter);
			} else {
				fail();
 38a:	0e 94 c7 00 	call	0x18e	; 0x18e <fail>
				break;
 38e:	54 cf       	rjmp	.-344    	; 0x238 <main+0x76>

00000390 <_exit>:
 390:	f8 94       	cli

00000392 <__stop_program>:
 392:	ff cf       	rjmp	.-2      	; 0x392 <__stop_program>
